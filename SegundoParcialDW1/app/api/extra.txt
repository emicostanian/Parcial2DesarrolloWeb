  const fetchTeams = async () => {
    setLoading(true);
    try {
      const data = await getTeams();
      setTeams(data);

      // Encuentra el último ID más alto
      if (data && data.length > 0) {
        const maxId = Math.max(...data.map((team) => parseInt(team.id, 10) || 0));
        setLastId(maxId);
      }
    } catch (error) {
      console.error('Error fetching teams:', error);
      alert('No se pudieron cargar los equipos. Intenta nuevamente.');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchTeams();
  }, []);

  const handleAddTeam = async () => {
    if (newTeam.name && newTeam.description && newTeam.logo) {
      const newId = lastId + 1; // Genera el próximo ID
      const teamToAdd = {
        id: newId.toString(),
        points: 0,
        goals: 0,
        ...newTeam,
      };

      try {
        const success = await addTeam(teamToAdd);
        if (success) {
          setLastId(newId); // Actualiza el último ID
          setNewTeam({ name: '', description: '', logo: '' });
          setModalVisible(false);
          fetchTeams();
        } else {
          alert('Error al agregar el equipo. Intenta nuevamente.');
        }
      } catch (error) {
        console.error('Error adding team:', error);
        alert('Error al agregar el equipo.');
      }
    } else {
      alert('Por favor, completa todos los campos.');
    }
  };